import numpy as np
import pandas as pd
from sklearn.neural_network import MLPRegressor
from sqlalchemy import create_engine

class ANN:
    SYMBOLS = ["GOOG", "YHOO", "AAPL", "FB", "MSFT", "AMZN", "SNE", "WMT", "CAJ", "TWTR"]

    def __init__(self):
        self.training_length = 10
        self.input_num = 4
        self.output_num = 1
        self.middle_layer = 9
        self.max_iterations = 10000
        self.learning_rate = 0.7
        self.max_error = 0.001
        self.result_next = np.zeros(len(self.SYMBOLS))
        self.historical_data = []
        self.historical_date = []
        self.result_data = []
        self.result_date = []
        self.next_data = 0.0
        self.next_date = "predict day 2"
        self.neural_net = MLPRegressor(hidden_layer_sizes=(self.middle_layer,), max_iter=self.max_iterations, learning_rate_init=self.learning_rate)

    def predict_next(self):
        print("---------- Start predicting next day's prices ----------")
        for symbol in self.SYMBOLS:
            self.load_data(symbol)
            price_all = np.array(self.historical_data)
            price_max = price_all.max()
            input_set = np.array([self.norm(price, price_max) for price in price_all[-self.input_num:]]).reshape(1, -1)

            try:
                self.neural_net = MLPRegressor(hidden_layer_sizes=(self.middle_layer,), max_iter=self.max_iterations, learning_rate_init=self.learning_rate)
                self.neural_net.fit(input_set, price_all[-1])  # Dummy fit to load parameters
                output = self.neural_net.predict(input_set)[0]
                output = round(self.denorm(output, price_max), 2)
                self.result_next[self.SYMBOLS.index(symbol)] = output
                print(f"{symbol}: {output}")
            except Exception as e:
                print(f"ERROR: Net not exists for {symbol}. {e}")
        print("---------- End prediction ----------")

    def predict_next2(self, symbol, price_max):
        print("---------- Start training ----------")
        price_temp = np.array(self.historical_data[-self.training_length + 1:] + [self.result_data[-1]])
        price_temp = np.array([self.norm(price, price_max) for price in price_temp])
        input_set = np.array([price_temp[i:i + self.input_num] for i in range(len(price_temp) - self.input_num)])
        output_set = price_temp[self.input_num:]

        self.neural_net.fit(input_set, output_set)
        print("---------- Finish training ----------")

        test_input = price_temp[-self.input_num:].reshape(1, -1)
        output = self.neural_net.predict(test_input)[0]
        output = round(self.denorm(output, price_max), 2)
        self.next_data = output
        print(f"predict day 2: {output}")
        print("---------- Finish testing ----------")

        self.store_next(symbol)

    def predict_history(self):
        for symbol in self.SYMBOLS:
            self.load_data(symbol)
            price_all = np.array(self.historical_data)
            price_max = price_all.max()

            for date_offset in range(len(self.historical_data) - self.training_length + 1):
                net_file = f"{symbol}-{date_offset + self.training_length - 1}.nnet"

                if not os.path.exists(net_file):
                    print("---------- Start training ----------")
                    price_temp = np.array(self.historical_data[date_offset:date_offset + self.training_length])
                    price_temp = np.array([self.norm(price, price_max) for price in price_temp])
                    input_set = np.array([price_temp[i:i + self.input_num] for i in range(len(price_temp) - self.input_num)])
                    output_set = price_temp[self.input_num:]

                    self.neural_net.fit(input_set, output_set)
                    print("---------- Finish training ----------")
                    joblib.dump(self.neural_net, net_file)
                    print(f"Successfully saved the neural net for {symbol}-{self.historical_date[date_offset + self.training_length - 1]}.")
                else:
                    self.neural_net = joblib.load(net_file)
                    print(f"Successfully loaded the neural net for {symbol}-{self.historical_date[date_offset + self.training_length - 1]}.")

                test_input = np.array([self.norm(self.historical_data[j], price_max) for j in range(date_offset + self.training_length - self.input_num, date_offset + self.training_length)]).reshape(1, -1)
                output = self.neural_net.predict(test_input)[0]
                output = round(self.denorm(output, price_max), 2)
                self.result_data.append(output)
                if date_offset == len(self.historical_data) - self.training_length:
                    self.result_date.append("predict day 1")
                    print(f"predict day 1: {output}")
                else:
                    self.result_date.append(self.historical_date[self.training_length + date_offset])
                    print(f"{self.historical_date[self.training_length + date_offset]}: {output}")

            self.store_result(symbol)
            self.predict_next2(symbol, price_max)

    def load_data(self, symbol):
        self.historical_data.clear()
        self.historical_date.clear()
        engine = create_engine("oracle+cx_oracle://stock:stock@localhost:1521")
        query = f"SELECT * FROM stockhistorical WHERE Symbol = '{symbol}'"
        df = pd.read_sql(query, engine)
        self.historical_data = df['ClosePrice'].tolist()
        self.historical_date = df['tDate'].tolist()
        print(f"OK: {len(self.historical_date)}")

    def store_result(self, symbol):
        engine = create_engine("oracle+cx_oracle://stock:stock@localhost:1521")
        with engine.connect() as conn:
            for i, result in enumerate(self.result_data):
                action = "UNKNOWN" if i == len(self.result_data) - 1 else "BUY" if result < self.result_data[i + 1] else "SELL" if result > self.result_data[i + 1] else "HOLD"
                query = f"INSERT INTO PredictionANN (Symbol, Date, Price, Change, Action) VALUES ('{symbol}', '{self.result_date[i]}', {result}, 0, '{action}')"
                conn.execute(query)

    def store_next(self, symbol):
        engine = create_engine("oracle+cx_oracle://stock:stock@localhost:1521")
        with engine.connect() as conn:
            query = f"INSERT INTO PredictionANN (Symbol, Date, Price, Change, Action) VALUES ('{symbol}', '{self.next_date}', {self.next_data}, 0, 'UNKNOWN')"
            conn.execute(query)

    def norm(self, num, max_val):
        return (num / max_val) * 0.8 + 0.1

    def denorm(self, num, max_val):
        return max_val * (num - 0.1) / 0.8

if __name__ == "__main__":
    ann = ANN()
    ann.predict_history()
